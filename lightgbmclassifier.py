# -*- coding: utf-8 -*-
"""LightGbmClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wPzUKbc40TRcyjAOLqxINJuIoQ225oYT
"""

import numpy as np
import pandas as pd

train=pd.read_csv("https://raw.githubusercontent.com/ezioauditore-tech/AI/main/datasets/Breast_cancer_data.csv")
train

train.isnull().sum()

#diag y
# other than diag x

#split x y

x=train[['mean_radius','mean_texture','mean_perimeter','mean_area','mean_smoothness']]
y=train['diagnosis']

#split test and train
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.2, random_state=42)

pip install lightgbm

import lightgbm as lgb
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report,make_scorer

lgb_classifier = lgb.LGBMClassifier()

# Define the parameter grid to search
param_grid = {
    'num_leaves': [31, 50, 100],
    'learning_rate': [0.01, 0.05, 0.1],
    'n_estimators': [50, 100, 200],
    'subsample': [0.8, 0.9, 1.0],
}

# Define the scoring metric
scorer = make_scorer(accuracy_score)

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=lgb_classifier, param_grid=param_grid, scoring=scorer, cv=5)

# Fit the model to the training data
grid_search.fit(x_train, y_train)

# Print the best parameters and corresponding score
print("Best Parameters: ", grid_search.best_params_)
print("Best Score: ", grid_search.best_score_)

# Get the best model from the grid search
best_model = grid_search.best_estimator_

# Make predictions on the test set
predictions = best_model.predict(x_test)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
print(f'Test Set Accuracy: {accuracy}')







